plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'java'
    // Test coverage
    id 'jacoco'

    // Code style
    id 'checkstyle'

    // PMD
    id 'pmd'

    // PITest
    id 'info.solidsoft.pitest'
}

group = 'nl.tudelft.cse.sem.template'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // add lombok to tests too
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
    testImplementation('org.assertj:assertj-core:3.23.1')
}

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        // TODO Change to package that we'll be using.
        includes = ['nl.tudelft.sem.template.*']
        excludes = []
    }
}

jacocoTestCoverageVerification() {
    dependsOn test
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['nl.tudelft.sem.template.*']

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.1
            }
        }
    }
}

checkstyle {
    toolVersion "8.37"
    configFile = file("${projectDir}/../config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    sourceSets = [sourceSets.main]
}

pmd {
    incrementalAnalysis = true
    sourceSets = [sourceSets.main]
    ruleSetFiles = files("${projectDir}/../config/pmd/pmd.xml")
    ruleSets = []
}

pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    junit5PluginVersion = '0.12'

    targetClasses = ['nl.tudelft.sem.template.*']  //by default "${project.group}.*"
    pitestVersion = '1.5.1' //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}
